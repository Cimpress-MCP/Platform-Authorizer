# license: Apache-2.0

service: Platform-Authorization

frameworkVersion: '>=1.0.0 <2.0.0'

custom:
  webpackIncludeModules:
    forceExclude:
      - aws-sdk

plugins:
  - serverless-plugin-custom-roles
  - serverless-webpack

package:
  individually: true

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-west-1
  versionFunctions: false # Otherwise, deployments would disable every service using this!
  stackTags:
    ROLE: Authorizer

functions:
  Authorizer:
    handler: authorizer.default
    description: Authenticates requests to the Cimpress Mass Customization Platform.
    environment:
      AUDIENCE: https://api.cimpress.io/
      AUTHORITY: https://cimpress.auth0.com/
  Reporter:
    handler: reporter.default
    description: Reports metrics on the use of the Platform Authorizer.
    memorySize: 128
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: '*'
    events:
      - cloudwatchLog:
          logGroup: &metricsLogGroup /aws/cloudtrail/${self:service}-${opt:stage, self:provider.stage}-Metrics
          filter: '{ $.eventName = Invoke }'

resources:
  Description: A custom authorizer for the Mass Customization Platform.
  # note(cosborn)
  # This looks very fiddly, but all we're doing is setting up CloudTrail
  # to deliver log entries to the CloudWatch log group we specified above:
  # the one with the event handler.
  Resources:
    TrailBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 90 # ¯\_(ツ)_/¯
              Status: Enabled
    TrailBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: TrailBucket
      Properties:
        Bucket: { Ref: TrailBucket }
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudtrail.amazonaws.com
              Action: s3:PutObject
              Resource: { Fn::GetAtt: [ TrailBucket, Arn ] }
    TrailLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: *metricsLogGroup
        RetentionInDays: 1 # note(cosborn) Super short because we event on each entry.
    TrailLogGroupRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudtrail.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: TrailCanWriteLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: logs:CreateLogStream
                  Resource: { Fn::GetAtt: [ TrailLogGroup, Arn ] }
                - Effect: Allow
                  Action: logs:PutLogEvents
                  Resource: { Fn::GetAtt: [ TrailLogGroup, Arn ] }
    Trail:
      Type: AWS::CloudTrail::Trail
      Properties:
        # todo(cosborn) Add SNS if some outside force wants these logs.
        IsLogging: true
        EventSelectors:
          - DataResources:
              - Type: AWS::Lambda::Function
                Values:
                  - Fn::GetAtt: [ AuthorizerLambdaFunction, Arn ]
            IncludeManagementEvents: false
        S3BucketName: { Ref: TrailBucket }
        CloudWatchLogsLogGroupArn: { Fn::GetAtt: [ TrailLogGroup, Arn ] }
        CloudWatchLogsRoleArn: { Fn::GetAtt: [ TrailLogGroupRole, Arn ] }
